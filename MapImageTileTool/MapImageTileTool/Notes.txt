MegaBuilder(working title) Design Notes:


Aspect Ratio:

all maps all scales maintain aspect ratio of 18x12 (best fit for TTS's scale 18units = 1 inch)
dimensionFactor: dimensionAspect x scale 
stretch/compress: get both width/length and choose the one closest to their aspectFactor, change other measurement to stay in ratio
fill: add blank pixels to complete map to fit ratio
fill will meet default size or resolution one size above
aspect ratio will be able to be changed when program moves away from being dependant on TTS (program settings file)

5400 x 3600 
3600 x 2400 default map resolution (200 ppi x (18x12) squares)

number of scaled maps on display:
maps that are tiled must be in correct ratio or have blank space added to end

Adding Maps:

save all map information in text file:

(Map Name)
(Scale)
(Tiling)
(SquaresX)
(SquaresY)
(OffsetX)
(OffsetY)

scaleFactor * imagePxls = newRes
(displayGridPxls / (mapPxls / mapSqs)) / displayScale = newRes / Pxls
displayGrid * mapSqs / displayScale = newRes

distance = 1000
scale = 1000 / 40 (mapSq) = 25
ceiling(1000 / displayX) = 56
56 * 18 / 25 = ~41

25miles by 40 sq
800px / 40 = 20

Folder System:

Source Image Folder, Resized-to-Aspect Images, Tiled Image Folders, Display Info JSON, Map Info JSON

Map Scale:

maps are contained in folders, folders contain JSON file that holds scale information and map info
going up and down a "zlevel" will go to next available scale
scaled down maps will need offsets to fit under the grid set by the higher-scale maps
offsets are given as map lengths (X: map widths, Y: map heights)

Map Info:

map sets save all the information for map and scale
mapObjects are created when image is tiled and added to JSONArray

TTS Tiling:

each image has its own tile, JSON array will be used to select map, Z-level, and grid area
main display board must be tracked and swapped

Loot Generation: (MUCH LATER)

importing JSON with logic to generate loot
player-selection loot tables can be made as physical tiles in TTS
